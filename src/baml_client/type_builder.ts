/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import { FieldType } from '@boundaryml/baml/native'
import {
  TypeBuilder as _TypeBuilder,
  EnumBuilder,
  EnumViewer,
  ClassBuilder,
  ClassViewer
} from '@boundaryml/baml/type_builder'
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from './globals.js'

export default class TypeBuilder {
  private tb: _TypeBuilder

  Command: ClassViewer<'Command', 'name' | 'description' | 'instructions'>

  CommandInstruction: ClassViewer<
    'CommandInstruction',
    'applyTo' | 'prompt' | 'files' | 'modifiedOnly'
  >

  CommandOuputInPullRequest: ClassViewer<
    'CommandOuputInPullRequest',
    'command' | 'pull_request_comment' | 'summary'
  >

  CommandPlan: ClassViewer<
    'CommandPlan',
    'name' | 'loadFiles' | 'loadCommandOutputs'
  >

  CommandReferenceFile: ClassViewer<'CommandReferenceFile', 'name' | 'path'>

  Comment: ClassViewer<'Comment', 'author' | 'body'>

  File: ClassViewer<'File', 'name' | 'path' | 'content' | 'patch'>

  LoadCommandOutputIntoContext: ClassViewer<
    'LoadCommandOutputIntoContext',
    'reason' | 'commandName'
  >

  LoadFileIntoContext: ClassViewer<
    'LoadFileIntoContext',
    'reason' | 'fullContent' | 'path'
  >

  PlanResult: ClassViewer<'PlanResult', 'plans'>

  PullRequest: ClassViewer<'PullRequest', 'title' | 'body' | 'comments'>

  PullRequestCommentForPlan: ClassViewer<
    'PullRequestCommentForPlan',
    'author' | 'body'
  >

  PullRequestFileForPlan: ClassViewer<
    'PullRequestFileForPlan',
    'filename' | 'status'
  >

  PullRequestForPlan: ClassViewer<
    'PullRequestForPlan',
    'title' | 'body' | 'comments' | 'files'
  >

  constructor() {
    this.tb = new _TypeBuilder({
      classes: new Set([
        'Command',
        'CommandInstruction',
        'CommandOuputInPullRequest',
        'CommandPlan',
        'CommandReferenceFile',
        'Comment',
        'File',
        'LoadCommandOutputIntoContext',
        'LoadFileIntoContext',
        'PlanResult',
        'PullRequest',
        'PullRequestCommentForPlan',
        'PullRequestFileForPlan',
        'PullRequestForPlan'
      ]),
      enums: new Set([]),
      runtime: DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME
    })

    this.Command = this.tb.classViewer('Command', [
      'name',
      'description',
      'instructions'
    ])

    this.CommandInstruction = this.tb.classViewer('CommandInstruction', [
      'applyTo',
      'prompt',
      'files',
      'modifiedOnly'
    ])

    this.CommandOuputInPullRequest = this.tb.classViewer(
      'CommandOuputInPullRequest',
      ['command', 'pull_request_comment', 'summary']
    )

    this.CommandPlan = this.tb.classViewer('CommandPlan', [
      'name',
      'loadFiles',
      'loadCommandOutputs'
    ])

    this.CommandReferenceFile = this.tb.classViewer('CommandReferenceFile', [
      'name',
      'path'
    ])

    this.Comment = this.tb.classViewer('Comment', ['author', 'body'])

    this.File = this.tb.classViewer('File', [
      'name',
      'path',
      'content',
      'patch'
    ])

    this.LoadCommandOutputIntoContext = this.tb.classViewer(
      'LoadCommandOutputIntoContext',
      ['reason', 'commandName']
    )

    this.LoadFileIntoContext = this.tb.classViewer('LoadFileIntoContext', [
      'reason',
      'fullContent',
      'path'
    ])

    this.PlanResult = this.tb.classViewer('PlanResult', ['plans'])

    this.PullRequest = this.tb.classViewer('PullRequest', [
      'title',
      'body',
      'comments'
    ])

    this.PullRequestCommentForPlan = this.tb.classViewer(
      'PullRequestCommentForPlan',
      ['author', 'body']
    )

    this.PullRequestFileForPlan = this.tb.classViewer(
      'PullRequestFileForPlan',
      ['filename', 'status']
    )

    this.PullRequestForPlan = this.tb.classViewer('PullRequestForPlan', [
      'title',
      'body',
      'comments',
      'files'
    ])
  }

  __tb() {
    return this.tb._tb()
  }

  string(): FieldType {
    return this.tb.string()
  }

  literalString(value: string): FieldType {
    return this.tb.literalString(value)
  }

  literalInt(value: number): FieldType {
    return this.tb.literalInt(value)
  }

  literalBool(value: boolean): FieldType {
    return this.tb.literalBool(value)
  }

  int(): FieldType {
    return this.tb.int()
  }

  float(): FieldType {
    return this.tb.float()
  }

  bool(): FieldType {
    return this.tb.bool()
  }

  list(type: FieldType): FieldType {
    return this.tb.list(type)
  }

  null(): FieldType {
    return this.tb.null()
  }

  map(key: FieldType, value: FieldType): FieldType {
    return this.tb.map(key, value)
  }

  union(types: FieldType[]): FieldType {
    return this.tb.union(types)
  }

  addClass<Name extends string>(name: Name): ClassBuilder<Name> {
    return this.tb.addClass(name)
  }

  addEnum<Name extends string>(name: Name): EnumBuilder<Name> {
    return this.tb.addEnum(name)
  }

  addBaml(baml: string): void {
    this.tb.addBaml(baml)
  }
}
