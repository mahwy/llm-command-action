/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio } from "@boundaryml/baml"
/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}

export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export interface Command {
  name: string
  description: string
  instructions: CommandInstruction
  
}

export interface CommandInstruction {
  applyTo?: string | null
  prompt: string
  files: CommandReferenceFile[]
  modifiedOnly?: boolean | null
  
}

export interface CommandOuputInPullRequest {
  command: string
  pull_request_comment: string
  summary: string
  
}

export interface CommandPlan {
  name: string
  loadFiles: LoadFileIntoContext[]
  loadCommandOutputs: LoadCommandOutputIntoContext[]
  
}

export interface CommandReferenceFile {
  name?: string | null
  path: string
  
}

export interface Comment {
  author: string
  body: string
  
}

export interface File {
  name?: string | null
  path: string
  content: string
  patch?: string | null
  
}

export interface GetApplyToFilterResult {
  reason: string
  applyTo: string
  
}

export interface GetForEachModifierResult {
  reason: string
  forEach: boolean
  
}

export interface GetModifiedOnlyFilterResult {
  reason: string
  modifiedOnly: boolean
  
}

export interface LoadCommandOutputIntoContext {
  reason: string
  commandName: string
  
}

export interface LoadFileIntoContext {
  reason: string
  fullContent: boolean
  path: string
  
}

export interface PlanResult {
  plans: CommandPlan[]
  
}

export interface PullRequest {
  title: string
  body: string
  comments: Comment[]
  
}

export interface PullRequestCommentForPlan {
  author: string
  body: string
  
}

export interface PullRequestFileForPlan {
  filename: string
  status: "added" | "modified" | "removed" | "renamed"
  
}

export interface PullRequestForPlan {
  title: string
  body: string
  comments: PullRequestCommentForPlan[]
  files: PullRequestFileForPlan[]
  
}
