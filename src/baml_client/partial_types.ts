/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio } from '@boundaryml/baml'
import type { Checked, Check } from './types.js'
import type {
  Command,
  CommandInstruction,
  CommandOuputInPullRequest,
  CommandPlan,
  CommandReferenceFile,
  Comment,
  File,
  LoadCommandOutputIntoContext,
  LoadFileIntoContext,
  PlanResult,
  PullRequest,
  PullRequestCommentForPlan,
  PullRequestFileForPlan,
  PullRequestForPlan
} from './types.js'
import type * as types from './types.js'

/******************************************************************************
 *
 *  These types are used for streaming, for when an instance of a type
 *  is still being built up and any of its fields is not yet fully available.
 *
 ******************************************************************************/

export interface StreamState<T> {
  value: T
  state: 'Pending' | 'Incomplete' | 'Complete'
}

export namespace partial_types {
  export interface Command {
    name?: string | null
    description?: string | null
    instructions?: CommandInstruction | null
  }
  export interface CommandInstruction {
    applyTo?: string | null
    prompt?: string | null
    files: CommandReferenceFile[]
    modifiedOnly?: boolean | null
  }
  export interface CommandOuputInPullRequest {
    command?: string | null
    pull_request_comment?: string | null
    summary?: string | null
  }
  export interface CommandPlan {
    name?: string | null
    loadFiles: LoadFileIntoContext[]
    loadCommandOutputs: LoadCommandOutputIntoContext[]
  }
  export interface CommandReferenceFile {
    name?: string | null
    path?: string | null
  }
  export interface Comment {
    author?: string | null
    body?: string | null
  }
  export interface File {
    name?: string | null
    path?: string | null
    content?: string | null
    patch?: string | null
  }
  export interface LoadCommandOutputIntoContext {
    reason?: string | null
    commandName?: string | null
  }
  export interface LoadFileIntoContext {
    reason?: string | null
    fullContent?: boolean | null
    path?: string | null
  }
  export interface PlanResult {
    plans: CommandPlan[]
  }
  export interface PullRequest {
    title?: string | null
    body?: string | null
    comments: Comment[]
  }
  export interface PullRequestCommentForPlan {
    author?: string | null
    body?: string | null
  }
  export interface PullRequestFileForPlan {
    filename?: string | null
    status?: 'added' | 'modified' | 'removed' | 'renamed' | null
  }
  export interface PullRequestForPlan {
    title?: string | null
    body?: string | null
    comments: PullRequestCommentForPlan[]
    files: PullRequestFileForPlan[]
  }
}
